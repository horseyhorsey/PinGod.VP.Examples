<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Machine on PinGod.VP Examples</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/</link><description>Recent content in Machine on PinGod.VP Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Oct 2017 15:26:15 +0000</lastBuildDate><atom:link href="https://horseyhorsey.github.io/PinGod.VP.Examples/machine/index.xml" rel="self" type="application/rss+xml"/><item><title>Switches to Actions</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/switchesactions/</link><pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate><guid>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/switchesactions/</guid><description>Switches Godot uses Actions so you can assign input controls to them.
In the projects Input Map add switches like the example below.
Switch numbers convert to these actions sw{number} and you can assign keyboard to test game switches directly in the window.
About An action comes into Godot like this so we know it&amp;rsquo;s a switch and act on the switch name
You can create any action here and trigger it from a simulator controller.</description></item><item><title>Using Switches (Godot)</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingswitches/</link><pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate><guid>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingswitches/</guid><description>Using in game scene scripts Override _Input(InputEvent @event)
Check if a switch has just been triggered on / off. This mode would use a pinGod game reference to do so.
//pinGod is a reference to the PinGodGame if (pinGod.SwitchOn(&amp;quot;inlane_l&amp;quot;, @event)) { AddPoints(100); } Check a switch state anywhere bool isInlaneOn = pinGod.SwitchOn(&amp;quot;inlane_l&amp;quot;);</description></item><item><title>Using Switches (Controller)</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingswitchescontroller/</link><pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate><guid>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingswitchescontroller/</guid><description>(Scripting) Visual Pinball - Switch On / Off Sub sw_plunger_lane_hit() : Controller.Switch 20, 1 : End Sub Sub sw_plunger_lane_unhit() : Controller.Switch 20, 0 : End Sub Sub sw_spinner_spin() : Controller.Switch 21, 0 : End Sub Auto Switch handlers (No scripting) In the BasicGame, Visual Pinball table switches are added to a simulator collection named AllSwitches.
Add the switch number to the TimerInterval box in the objects settings and add the switch to the AllSwitches collection.</description></item><item><title>Using Coils (Godot)</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingcoils/</link><pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate><guid>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingcoils/</guid><description>Coils can be On, Off or Pulsed. Get a reference to pinGod and use methods with name.
pinGod.SolenoidPulse(&amp;quot;trough&amp;quot;, 225); pinGod.SolenoidOn(&amp;quot;trough&amp;quot;, 1); pinGod.SolenoidOn(&amp;quot;trough&amp;quot;, 0); pinGod.SolenoidPulse(&amp;quot;auto_plunger&amp;quot;)// Pulse the auto plunger pinGod.SolenoidOn(&amp;quot;flippers&amp;quot;, 1) // enable the flippers</description></item><item><title>Using Coils (Controller)</title><link>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingcoilscontroller/</link><pubDate>Tue, 17 Oct 2017 15:26:15 +0000</pubDate><guid>https://horseyhorsey.github.io/PinGod.VP.Examples/machine/usingcoilscontroller/</guid><description>Visual Pinball SolCallbacks When Visual Pinball detects changed coils the callbacks are invoked by coil number.
The script example to handle coil 35 would be SolCallback(35) = &amp;quot;Lampshow2&amp;quot;. This will invoke the LampShow2 sub routine (if you have one)
Some standard callbacks for default game:
SolCallback(0) = &amp;quot;Died&amp;quot; ' If at some point Godot closes then this lets VP know about it SolCallback(1) = &amp;quot;bsTrough.solOut&amp;quot; ' The trough which makes the ball pop out.</description></item></channel></rss>